/**
 * Scales
 */

$scales: (
  xtiny: 10px,   /* 10 */
  tiny: 12px,      /* 12 */
  small: 16px,   /* 14 */
  normal: 18px,  /* 16, default */
  large: 22px,   /* 18 */
  xlarge: 35px,  /* 22 */
  xxlarge: 50px  /* 36 */
);


// $scales: (
//   xtiny: 0.9em,   /* 10 */
//   tiny: 1em,      /* 12 */
//   small: 1.1em,   /* 14 */
//   normal: 1.3em,  /* 16, default */
//   large: 1.5em,   /* 18 */
//   xlarge: 1.8em,  /* 22 */
//   xxlarge: 2.6em  /* 36 */
// );


@function fontscale($name) {
  // XXX refactor this
  @if map-get($mq-context, until) {
    $breakpoint: map-get($mq-context, until);
  } @else {
    $breakpoint: map-get($mq-context, from);
  }

  @return map-get($scales, $name);
}

%scale-tiny    { font-size: fontscale(tiny);    }
%scale-small   { font-size: fontscale(small);   }
%scale-normal  { font-size: fontscale(normal);  }
%scale-large   { font-size: fontscale(large);   }
%scale-xlarge  { font-size: fontscale(xlarge);  }
%scale-xxlarge { font-size: fontscale(xxlarge); }

/**
 * Weights
 */

$weights: (
  thin: 300,
  regular: 400, /* default */
  bold: 500
);

@function weight($name) {
  @return map-get($weights, $name);
}

%weight-thin    { font-weight: weight(thin);    }
%weight-regular { font-weight: weight(regular); }
%weight-bold    { font-weight: weight(bold);    }

/**
 * Colors
 */

// shades of grey
%color-lighter  { color: color(lighter); }
%color-light    { color: color(light); }
%color-dark     { color: color(dark); }
%color-darker   { color: color(darker); }  /* default */

// errors & alerts
%color-success  { color: color(success); }
%color-warning  { color: color(warning); }
%color-danger   { color: color(error); }

/**
 *
 */

@mixin typography-impl($args) {
  $breakpoint: (length($mq-context) > 0);

  @each $arg in $args {
    @if $arg == uppercase {
      text-transform: uppercase;
    }
    @elseif $arg == lowercase {
      text-transform: lowercase;
    }
    @elseif $arg == underline {
      text-decoration: underline;
    }
    @else if $arg == italic {
      font-style: italic;
    }
    @else if $arg == center {
      text-align: center;
    }
    @else if $arg == left {
      text-align: left;
    }
    @else if $arg == right {
      text-align: right;
    }
    @else if $arg == justify {
      text-align: justify;
    }
    @else if $arg == Ailerons {
      font-family: Ailerons;
    }
    @else if $arg == nowrap {
      white-space: nowrap;
    }
    @else if $arg == wrap {
      white-space: normal;
    }
    @else {
      @if map-has-key($scales, $arg) {
        $fontSize: fontscale($arg);
        font-size: fontscale($arg);

      }
      @elseif map-has-key($weights, $arg) {
        font-weight: weight($arg);
        @if $arg == heavy {
          -webkit-font-smoothing: antialiased;
        }
      }
      @elseif map-has-key($colors, $arg) {
        color: color($arg);
      }
    }
  }
}

/**
 * Front-end mixin.
 */
    //@include typography($desktop: thin red, $tablet: bold underline)

@mixin typo(
  $desktop: false,
  $mobile: false,
  $tablet: false,
  $wide: false
) {
  @include typography-impl($desktop);

  @if false != $tablet {
    @include mq($until: tablet) {
      @include typography-impl($tablet);
    }
  }

  @if false != $mobile {
    @include mq($until: mobile) {
      @include typography-impl($mobile);
    }
  }

  @if false != $wide {
    @include mq($from: wide) {
      @include typography-impl($wide);
    }
  }
}

/**
 * Truncates text overflow.
 */

@mixin truncate($boundary: false) {
  @if $boundary {
    max-width: $boundary;
  }
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
